
리액트 컴포넌트의 가장 중요한 부분 : ** State ** , Lifecycle
--> State 는 정말 중요한 부분이다
--> Lifecycle은 이런 게 있다 정도로 이해하고 넘어가자 (class 컴포넌트가 쓰인다)

State : 리액트 Component 의 상태 --> 리액트 컴포넌트의 변경 가능한 데이터
            --> state 는 사전에 미리 정해진 것이 아니라, 리액트 컴포넌트를 개발하는 각 개발자가 (자기 자신) 직접 정의해서 사용하는 것이다

State 사용할 대 주의할 점 : 반드시 렌더링이나 데이터 흐름에 사용되는 값만 state에 포함시켜야 한다
                                           --> state 가 변경될 경우, 컴포넌트가 재 랜더링 되기 때문에, 랜더링과 데이터 흐름에 관련 없는 값을 포함할 경우
                                                  불필요한 경우에 컴포넌트가 다시 랜더링 되어 성능을 저하시킬 수 있기 때문이다

                                                  그렇기에 랜더링과 데이터 흐름에 관련 있는 값만 state 에 포함하도록 해야하며, 그렇지 않은 값은
                                                  컴포넌트에 "인스턴스 빌드" 로 정의하면 된다


    State는 JavaScript 객체이다
    ex)
    class LikeButton extends React.Component {
        constructor(props) {
            super(props);

            this.state = {
                liked: false
            };
        }
        ...
    }
    --> LikeButton 이라는 리액트 클래스 컴포넌트를 나타낸 것이다
    --> this.state 부분이 현재 컴포넌트의 state 를 정의하는 부분이다 (class 컴포넌트의 경우 state 를 생성자에서 정의한다)
    ==> 함수 컴포넌트는 state 를 "use state" 라는 훅을 사용해서 정의하게 된다 (이 내용은 뒤에서 다룬다)

    State 는 정의된 이후 직접 수정할 수 없다 (수정이 가능은 하지만, 그렇게 해서는 안된다)
    state를 직접 수정(잘못된 사용법) ex)
        this.state = {
            name: 'Inje'
        };

    setState 함수를 통한 수정(정상적인 사용법) ex)
        this.setState({
            name: 'Inje'
        });

    --> state 는 직접적인 변경이 불가능하다고 보면 된다
    --> 리액트의 state 는 컴포넌트의 랜더링과 관련이 있기 때문에 마음대로 수정하게 되면 개발자가 의도한 대로 작동하지 않을 가능성이 있다
    --> 즉, class 컴포넌트에서 state 를 변경하고자 할 때에는 반드시 "setState()" 라는 함수를 사용해야한다

    ------------------------------------------------------------------------------------------------------------------------------

    리액트 컴포넌트의 Lifecycle : 리액트 컴포넌트의 생명주기 --> 컴포넌트가 "생성되는 시점" 과 "사라지는 시점" 이 정해져있다

    --> Component가 계속 존재하는 것이 아니라, 시간의 흐름에 따라 생성되고 업데이트 되다가 사라진다 ***

    Lifecycle 은 크게 "출생" , "인생" , "사망" 이렇게 나뉜다

        ------------------------------------------------------------------------------------------------------------------

        출생 (Mount) : 생성자가 실행된다.
                                 컴포넌트의 state를 정의하게 된다.

                                 ==> 컴포넌트가 랜더링되며, 이후에 componentDidMount 함수가 호출된다.

        ------------------------------------------------------------------------------------------------------------------

        인생 (Update) : 생에 동안 변화를 격으면서 여러번 랜더링 된다 --> 업데이트되는 과정이라고 할 수 있다.
                                   업데이트 과정에서는 컴포넌트의 props 가 변경되거나 setState() 함수에 의해 state 가 변경되거나,
                                   forceUpdate() 라는 강제 업데이트 함수 호출로 인해 컴포넌트가 다시 랜더링될 수 있다.

                                   ==> 랜더링 이후에 componentDidUpdate 함수가 호출된다.

        ------------------------------------------------------------------------------------------------------------------

        사망 (Unmount) : 상위 컴포넌트에서 현재 컴포넌트를 더 이상 화면에 표시하지 않게 될 때, Unmount 된다고 볼 수 있다.

                                      ==> Unmount 직전에 componentWillUnmount 함수가 호출된다.

        ------------------------------------------------------------------------------------------------------------------