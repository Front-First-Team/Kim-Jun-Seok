
Component 합성 : 여러개의 컴포넌트를 합쳐서 하나의 컴포넌트를 만드는 것
                                컴포넌트 안에 또 다른 컴포넌트를 사용할 수 있기에, 복잡한 화면을 여러 개의 컴포넌트로 나눠서 구현이 가능하다

    Welcome 컴포넌트를 사용해서 컴포넌트 합성을 하는 예제 코드 :
    ex)
    function Welcome(props) {
        return <h1>Hello, {props.name}</h1>;
    }

    function App(props) {
        return (
            <div>
                <Welcome name = "Mike" />
                <Welcome name = "Steve" />
                <Welcome name = "Jane" />
            </div>
        )
    }

    ReactDOM.render(
        <App />, document.getElementById('root')
    )
    --> props(name) 의 값을 다르게해서, Welcome 컴포넌트를 여러개 사용하는 것을 볼 수 있다
    --> App 컴포넌트는 Welcome 컴포넌트 3개를 포함하고 있는 컴포넌트가 되는 것이다


------------------------------------------------------------------------------------------------

Component 추출 : 합성과 반대로 복잡한 컴포넌트를 쪼개서, 여러개의 컴포넌트로 나누는 것
                                큰 컴포넌트에서 일부를 쪼개서 새로운 컴포넌트를 만드는 것 (어느 정도까지 쪼개야하는지의 기준은 개발자 자기 자신이 정한다)

    --> Component 추출을 잘 활용하게 되면 컴포넌트의 재사용성이 올라간다 --> 컴포넌트가 작아질 수록, 해당 컴포넌트의 기능과 목적이
            명확해지고 props 도 단순해지기 때문에 다른 곳에서 사용할 수 있는 확률이 높아지기 때문이다

    Component 추출하는 과정 예제 코드 :
    ex)
    function Comment(props) {
        return (
            <div className = "comment">
                <div className = "user-info">
                    <img className = "avatar"
                        src = {props.author.avatarUrl}
                        alt = {props.author.name}
                    />
                    <div className = "user-info-name">
                        {props.author.name}
                    </div>
                </div>

                <div className = "comment-text">
                    {props.text}
                </div>

                <div className = "comment-date">
                    {formatDate(props.date)}
                </div>
            </div>
        )
    }

    --> 이 Comment 라는 컴포넌트는 댓글을 표시하기 위한 컴포넌트이다
    --> 내부에 작성자의 프로필이미지, 이름, 댓글내용, 작성일을 포함하고 있다
    --> 이 컴포넌트의 props 는 밑의 코드와 같다

    props = {
        author: {
            name: "소플",
            avatarUrl: "https://...",
        },
        text: "댓글입니다.",
        date: Date.now(),
    }

    ==> 이제 이 Comment 라는 컴포넌트에서 하나씩 컴포넌트를 추출해보자

    ------------------------------------------------------------------------

    1. Avatar 추출하기 :

        Comment 컴포넌트에서는 img 태그를 사용하여 사용자의 프로필 이미지를 표시하고 있다 :
        <img className = "avatar"
            src = {props.author.avatarUrl}
            alt = {props.author.name}
        />

        --> 이 부분을 추출해서 Avatar 라는 별도의 컴포넌트를 만들어보자

        function Avatar(props) {
            return (
                <img className = "avatar"
                    src = {props.user.avatarUrl}
                    alt = {props.user.name}
                />
            )
        }

        --> 추출된 Avatar 컴포넌트는 이런 모습이 된다
        --> props 에 기존에 사용하던 "author" 대신 좀 더 보편적인 의미를 담고 있는 "user" 를 사용해서 재사용성적인 면을 더욱 고려했다
        
        ==> 이렇게 추출된 Avatar 컴포넌트를 실제로 Comment 컴포넌트에 반영해보자

        <div className = "user-info">
            <Avatar user = {props.author} />
            <div className = "user-info-name">
                {props.author.name}
            </div>
        </div>

        --> Avatar 라는 컴포넌트로 img 태그가 교체되니, 코드의 양과 가독성이 올라갔다

    ------------------------------------------------------------------------

    2. UserInfo 추출하기 :

        <div className = "user-info">
            <Avatar user = {props.author} />
            <div className = "user-info-name">
                {props.author.name}
            </div>
        </div>

        --> 이 부분이 사용자의 정보를 담고 있는 부분이다, 이 부분을 추출해서 별도의 컴포넌트로 만들어보자

        function UserInfo(props) {
            return (
                <div className = "user-info">
                    <Avatar user = {props.user} />
                    <div className = "user-info-name">
                        {props.user.name}
                    </div>
                </div>
            )
        }

        --> 전에 추출했던 Avatar 컴포넌트도 여기에 함께 추출된 것을 볼 수 있다
        --> 그리고 역시 props 에 author 대신 좀 더 보편적인 의미를 담고 있는 user 를 적어줬다

        ==> 이제 추출된 UserInfo 컴포넌트를 Comment 컴포넌트에 반영해보자

        function Comment(props) {
            return (
                <div className = "comment">
                    <UserInfo user = {props.author} />
                    <div className = "comment-text">
                        {props.text}
                    </div>
                    <div className = "comment-date">
                        {formatDate(props.date)}
                    </div>
                </div>
            )
        }

        --> 코드가 처음보다 훨씬 단순해진 것을 확인할 수 있다

    ------------------------------------------------------------------------

    지금까지 추출한 컴포넌트들의 구조를 정리해보면 다음과 같다

    -> Comment 컴포넌트가 UserInfo 컴포넌트를 포함하고 있다

    -> UserInfo 컴포넌트가 Avatar 컴포넌트를 포함하고 있다

    지금까지 추출한 것 이외에도, 추가적으로 comment 의 글(text)과 작성일(date)이 나오는 부분도 별도의 컴포넌트로 추출이 가능하다

    ==> 컴포넌트를 어느정도 수준까지 추출하는 게 좋은지는 정해진 기준은 없지만, 기능 단위로 구분하는 것이 좋고
             나중에 곧 바로 사용이 가능한 형태로 추출하는 것이 좋다

    ==> 재사용할 수 있는 컴포넌트를 많이 갖고 있을 수록 개발속도가 굉장히 빨라지게 된다 !!!

    ------------------------------------------------------------------------

    3. comment-text 추출하기 :

        <div className = "comment">
            <UserInfo user = {props.author} />
            <div className = "comment-text">
                {props.text}
            </div>
            <div className = "comment-date">
                {formatDate(props.date)}
            </div>
        </div>

        comment-text 태그를 컴포넌트로 쪼개보자 :

        function CommentText(props) {
            return (
                <div className = "comment-text">
                    {props.text}
                </div>
            )
        }

        추출된 것을 Comment 컴포넌트에 반영 :

        <div className = "comment">
            <UserInfo user = {props.author} />
            <CommentText text = {props.text} />
            <div className = "comment-date">
                {formatDate(props.date)}
            </div>
        </div>

    ------------------------------------------------------------------------

    4. comment-date 추출하기 :

        <div className = "comment">
            <UserInfo user = {props.author} />
            <CommentText text = {props.text} />
            <div className = "comment-date">
                {formatDate(props.date)}
            </div>
        </div>

        comment-data 태그를 컴포넌트로 쪼개보자 :
    
        function CommentDate(props) {
            return (
                <div className = "comment-date">
                    {formatDate(props.date)}
                </div>
            )
        }

        추출된 것을 Comment 컴포넌트에 반영 :

        <div className = "comment">
            <UserInfo user = {props.author} />
            <CommentText text = {props.text} />
            <CommentDate date = {props.date} />
        </div>

    ------------------------------------------------------------------------

    결과적으로 코드는 이렇게 된다 :

        function Comment(props) {
            return (
                <div className = "comment">
                    <UserInfo user = {props.author} />
                    <CommentText text = {props.text} />
                    <CommentDate date = {props.date} />
                </div>
            )
        }

    속성 값 :

        props = {
            author: {
                name: "소플",
                avatarUrl: "https://...",
            },
            text: "댓글입니다.",
            date: Date.now(),
        }
