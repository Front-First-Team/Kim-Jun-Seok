
React Element 특징 : 불변성 (한번 생성된 Element 는 변하지 않는다)
    --> Element 생성 후에는 children이나 attributes를 바꿀 수 없다 (attributes : 속성, 특성, 계수)

    React Element 는 우리 눈에 보이는 것을 기술한다고 했는데, Element 가 변할 수 없다면 화면 갱신이 안되는 것 아닌가?
    --> Element 를 "생성 후" 에는 이라는 말이 중요하다 --> Element 는 다양한 모습으로 존재할 수 있지만, 한번 생성된 다음에는 불변성을 가짐

    붕어빵으로 ex)
    - Element 는 일종의 붕어빵 틀이라고 생각하면 된다
    - 붕어빵이 구워져서 밖으로 나오는 과정은 Element 를 생성하는 과정
    - 완성된 붕어빵은 Element 생성이 끝난 것이기 때문에 변경할 수 없다

    그렇다면, 화면에 변경된 Element 들을 보여주기 위해선 어떻게 해야할까?
    --> 기존 Element 를 변경하는 것이 아니라 (불변성 있어서 변경 X) 새로운 Element 를 만들어서 기존 Element 와 바꿔치기하는 것이다
    --> Virtual DOM 과 빠른 랜더링을 하기에 리액트는 이것이 가능하다


Elements 랜더링 하는 과정 :

    <div id="root"></div>
    --> 이 root 라는 이름을 가진 div 태그는 모든 리액트 앱에 필수적으로 들어가는 아주 중요한 코드이다
    --> 이 div 태그 안에 React Element 들이 "랜더링" 되며, 이것을 "Root DOM Node" 라고 부른다
    --> 이 div 태그 안에 있는 모든 것이 React DOM 에 의해서 관리된다
    --> 오직 React 만으로 만들어진 모든 웹사이트들은 단 하나의 Root DOM Node 를 가지게 된다
    --> 반면에, 기존에 있던 웹사이트에 추가적으로 React 를 연동하게 되면, 여러개의 Root DOM Node 를 가질 수도 있다

    ==> 즉, Virtual DOM 에서 가장 최상단의 요소가 "Root DOM Node" 라고 보면 된다
    ==> 실제로 랜더링 (화면에 보여지게 하는) 되는 공간이다

    ------------------------------------------------------------------------------------------------------------

    root div 에 React Element 를 랜더링 하기 위해서는 밑의 코드를 사용한다
    
    const element = <h1>안녕, 리액트!</h1>;
    ReactDOM.render(element, document.getElementById('root'));

    --> 이 코드는 먼저 element 를 하나 생성하고, 생성된 element 를 root div 에 랜더링하는 코드이다
    --> 랜더링하기 위해 ReactDOM 의 render() 라는 함수를 사용하게 된다

    ==> render() 함수는 첫번째 파라미터는 "React Element" 를 넣고, 두번째 파라미터는 "HTML Element" 를 넣는다(DOM Element)
            --> React 의 Element 와 DOM 의 Element 는 다른 개념이란 것을 유의해야한다

            - React 의 Element : React 의 Virtual DOM 에 존재하는 것  -->  ex) const element = <h1>안녕, 리액트!</h1>;
            - DOM 의 Element : 실제 브라우저의 DOM 에 존재하는 것  -->  ex) <div id="root"></div>

            ==> 위의 과정들은 Root DOM Node 이다
            ==> 결국, 리액트의 Element 가 랜더링 되는 과정은 Virtual DOM 에서, 실제 DOM 으로 이동하는 과정이라고 할 수 있다

------------------------------------------------------------------------------------------------------------

랜더링된 Element 를 업데이트 하는 과정 :

    React 의 Element 는 생성 후에 불변성을 갖는다고 했다 --> Element 를 업데이터하기 위해서는 다시 생성해야한다

    예제 코드 ex)
    function tick() {
        const element = (
            <div>
                <h1>안녕, 리액트!</h1>
                <h2>현재 시간: {new Date().toLocalTimeString}</h2>
            </div>
        )
        ReactDOM.render(element, document.getElementById('root'))
    }

    setInterval(tick, 1000)

    --> 이 코드의 실행 결과 : 매초 화면에 새로운 시간이 나오게 된다
            내부적으로는 tick 함수가 실행될 때마다 기존 Element 를 변경하는 것이 아니라, 새로운 Element 생성해서 바꿔치기하는 것이다
            개발자 도구를 확인해보면, 갱신되는 부분만 반짝이며 변하는 것을 확인할 수 있다 (함수 안에 element 라는 요소를 선언해줬기에, 계속 새롭게 선언해준다)

            --> 새로운 Element 가 생성된다 --> 기존의 Element 와 교체된다 --> 내용이 변경됨 --> 변경된 부분에만 반짝이는 효과가 나타나는 것


    ==> 즉, React Element 의 불변성 때문에 Element 를 업데이트 하기 위해서는 새로 만들어야한다는 중요한 사실을 꼭 기억하자